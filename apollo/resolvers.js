const postgreService = require('../services/postgres-service')
require('dotenv').config()

postgreService.connect().then((client) => db = client)

const resolvers = {
    Query: {
        planes: async () => {
            try {
                let st = 'SELECT * FROM planes ORDER BY id ASC'
                let result = await db.query(st)
                return result.rows
            } catch (error) {
                console.error('Error running query', error)
                return null
            }
        },
        customers: async () => {
            try {
                let st = 'SELECT * FROM customers ORDER BY id ASC'
                let result = await db.query(st)
                return result.rows
            } catch (error) {
                console.error('Error running query', error)
                return null
            }
        },
        solds: async () => {
            try {
                let st = 'SELECT * FROM solds ORDER BY id ASC'
                let result = await db.query(st)
                return result.rows
            } catch (error) {
                console.error('Error running query', error)
                return null
            }
        }
    },
    Mutation: {
        addPlanesTable: async (root) => {
            try {
                let st = `
                CREATE TABLE planes (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    type VARCHAR(30) NOT NULL,
                    payload VARCHAR(30) NOT NULL,
                    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
                )
                `
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'planes table was created!' }
        },
        removePlanesTable: async (root) => {
            try {
                let st = `DROP TABLE planes`
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'planes table was removed!' }
        },
        addPlane: async (root, args, context, info) => {
            let { type, payload } = args.plane
            let st = `INSERT INTO planes (type,payload) 
                      VALUES ('${type}','${payload}')`
            try {
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'Plane was added to database!' }
        },
        removePlane: async (root, args, context, info) => {
            let st = `DELETE FROM planes WHERE planes.id = ${args.id}`
            try {
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: `Plane with id:${args.id} was deleted from database!` }
        },
        updatePlane: async (root, args, context, info) => {
            let st = await makeQueryString(args.plane, 'planes')
            try {
                let r = await db.query(st)
                if (!r.rowCount) return { message: `Plane not found!` }
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: `Plane with id:${args.plane.id} was updated!` }
        },
        addCustomersTable: async (root) => {
            try {
                let st = `
                CREATE TABLE customers (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    first VARCHAR(30) NOT NULL,
                    last VARCHAR(30) NOT NULL,
                    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
                )
                `
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'customers table was created!' }
        },
        removeCustomersTable: async (root) => {
            try {
                let st = `DROP TABLE customers`
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'customers table was removed!' }
        },
        addCustomer: async (root, args, context, info) => {
            let { first, last } = args.customer
            let st = `INSERT INTO customers (first,last) 
                      VALUES ('${first}','${last}')`
            try {
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'Customer was added to database!' }
        },
        addSoldsTable: async (root) => {
            try {
                let st = `
                CREATE TABLE solds (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    plane_id INT NOT NULL,
                    plane_type VARCHAR(30) NOT NULL,
                    plane_payload VARCHAR(30) NOT NULL,
                    customer_id INT NOT NULL,
                    customer_first VARCHAR(30) NOT NULL,
                    customer_last VARCHAR(30) NOT NULL,
                    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
                )
                `
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'solds table was created!' }
        },
        removeSoldsTable: async (root) => {
            try {
                let st = `DROP TABLE solds`
                await db.query(st)
            } catch (error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'solds table was removed!' }
        },
        makeOrder: async (root, args, context, info) => {
            try{
              console.log(args)
              let st = `SELECT * FROM planes WHERE planes.id = '${args.order.plane_id}'`
              let result = await db.query(st)
              let r1 = result.rows[0];
              if(!r1)  return { message: 'No such Plane!' }
              st = `SELECT * FROM customers WHERE customers.id = '${args.order.customer_id}'`
              result = await db.query(st)
              let r2 = result.rows[0];
              if(!r2)  return { message: 'No such Customer!' }
              console.log('r1',r1,'r2',r2)
              st = `INSERT INTO solds (plane_id,plane_type,plane_payload,customer_id,customer_first,customer_last) 
                      VALUES ('${r1.id}','${r1.type}','${r1.payload}','${r2.id}','${r2.first}','${r2.last}')`
              try {
                await db.query(st)
              }catch (error) {
                 console.log(error)
                 return { message: error.message }
              }
            }catch( error) {
                console.log(error)
                return { message: error.message }
            }
            return { message: 'order was made!' }
        }
    }     
}


async function makeQueryString(data, table) {
    let st1 = `UPDATE ${table} SET `;
    let st2 = ` WHERE id = ${data.id}`;
    for (let [key, value] of Object.entries(data)) {
        if (key !== 'id') {
            st1 += `${key} = '${value}', `
        }
    }
    let st = st1.slice(0, -2) + st2;
    return st
}


module.exports = {
    resolvers
}
